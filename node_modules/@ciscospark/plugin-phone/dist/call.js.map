{"version":3,"sources":["call.js"],"names":["deprecatedCallEventNames","getMediaDirectionFromSDP","kind","sdp","media","find","m","type","direction","reverseMediaDirection","dir","Error","didChange","offer","answer","o","a","includes","capitalize","audio","video","Call","extend","namespace","children","collections","memberships","session","activeParticipantsCount","default","required","remoteAudioMuted","remoteVideoMuted","correlationId","facingMode","values","internalCallId","setOnce","locus","localMediaStream","locusJoinInFlight","locusLeaveInFlight","me","derived","id","deps","fn","isActive","joinedOnThisDevice","spark","locusUrl","device","self","devices","item","url","internal","mediaConnection","mediaId","remoteMember","_self","undefined","from","isCall","isInitiator","to","state","config","enableExperimentalGroupCallingSupport","status","previousAttributes","remoteMediaStream","receivingAudio","receivingVideo","sendingAudio","sendingVideo","supportsDtmf","acknowledge","logger","info","alert","then","_setLocus","options","resolve","pc","remoteDescription","_join","decline","reject","dial","invitee","locusMethodName","validate","parsed","decode","split","resourceType","services","conversationServiceUrl","mercury","connect","catch","reason","trigger","hangup","stop","when","_finish","_hangup","initialize","args","prototype","listenTo","audioMuted","videoMuted","on","model","filter","length","once","listenToAndRun","participants","set","event","_onLocusEvent","error","createOffer","_updateMedia","offerSdp","_pollForExpectedLocusAndSdp","JSON","parse","remoteSdp","acceptAnswer","emit","forEach","track","getTracks","t","setMedia","enabled","key","hangupIfLastActive","call","meeting","previousLocus","process","nextTick","eventName","rest","sendDtmf","tones","sendFeedback","feedback","metrics","submit","startReceivingAudio","_changeReceivingMedia","startReceivingVideo","startSendingAudio","_changeSendingMedia","startSendingVideo","stopReceivingAudio","stopReceivingVideo","stopSendingAudio","stopSendingVideo","toggleFacingMode","constraint","ideal","toggleReceivingAudio","toggleReceivingVideo","toggleSendingAudio","toggleSendingVideo","value","section","_updateMuteToggles","newDirection","leave","err","stack","toString","stopListening","off","target","constraints","phone","defaultFacingMode","mode","recvOnly","offerOptions","offerToReceiveAudio","offerToReceiveVideo","fake","v4","bandwidthLimit","audioBandwidthLimit","videoBandwidthLimit","localSdp","signalingState","ended","data","eventType","replaces","replaced","lastActive","audioOfferDirection","videoOfferDirection","count","isExpectedDirection","_validateLocusMediaState","setTimeout","sync","audioAnswerDirection","videoAnswerDirection","expectedAudioAnswerDirection","expectedVideoAnswerDirection","incoming","recursing","current","action","compare","merge","get","payload","updateMedia","answerSdp","_waitForExpectedLocus","locusAudio","audioStatus","toLowerCase","mediaAudio","audioDirection","warn","locusVideo","videoStatus","mediaVideo","videoDirection","listener","make","attrs"],"mappings":"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","file":"call.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-env browser: true */\n\nimport {SparkPlugin} from '@ciscospark/spark-core';\nimport {\n  base64,\n  oneFlight,\n  retry,\n  tap,\n  whileInFlight\n} from '@ciscospark/common';\nimport {\n  USE_INCOMING,\n  FETCH\n} from '@ciscospark/internal-plugin-locus';\nimport WebRTCMediaEngine from '@ciscospark/media-engine-webrtc';\nimport {debounce, defaults, find, get, wrap} from 'lodash';\nimport {\n  getState,\n  getStatus,\n  isCall,\n  activeParticipants,\n  direction,\n  isActive,\n  joinedOnThisDevice,\n  makeInternalCallId,\n  participantsToCallMemberships\n} from './state-parsers';\nimport boolToStatus from './bool-to-status';\n\nimport CallMemberships from './call-memberships';\nimport uuid from 'uuid';\n\nimport {parse} from 'sdp-transform';\n\nconst deprecatedCallEventNames = [\n  'ringing',\n  'connected',\n  'disconnected',\n  'replaced'\n];\n\n/**\n * Pulls the direction line for the specified media kind from an sdp\n * @param {string} kind\n * @param {string} sdp\n * @protected\n * @returns {string}\n */\nfunction getMediaDirectionFromSDP(kind, sdp) {\n  if (typeof sdp === 'string') {\n    sdp = parse(sdp);\n  }\n\n  const media = sdp.media.find((m) => m.type === kind);\n  if (!media || !media.direction) {\n    return 'inactive';\n  }\n\n  return media.direction;\n}\n\n/**\n * Reverses a media direction from offer to answer (e.g. sendonly -> recvonly)\n * @param {string} dir\n * @protected\n * @returns {string}\n */\nfunction reverseMediaDirection(dir) {\n  switch (dir) {\n    case 'inactive':\n    case 'sendrecv':\n      return dir;\n    case 'sendonly':\n      return 'recvonly';\n    case 'recvonly':\n      return 'sendonly';\n    default:\n      throw new Error(`direction \"${dir}\" is not valid`);\n  }\n}\n\n/**\n * Helper for detmerming what mute value toggles to send to locus.\n * @private\n *\n * @param {string} kind\n * @param {string} offer\n * @param {string} answer\n * @returns {boolean}\n */\nfunction didChange(kind, offer, answer) {\n  const o = parse(offer).media.find((m) => m.type === kind);\n  const a = parse(answer).media.find((m) => m.type === kind);\n\n  if (!o && !a) {\n    return false;\n  }\n\n  if (!o && a.direction.includes('send')) {\n    return true;\n  }\n\n  if (!a && o.direction.includes('send')) {\n    return true;\n  }\n\n  if (o.direction === a.direction) {\n    return false;\n  }\n\n  if (o.direction.includes('send') && a.direction.includes('send') || !o.direction.includes('send') && !a.direction.includes('send')) {\n    return false;\n  }\n  return true;\n}\n\nconst capitalize = {\n  audio: 'Audio',\n  video: 'Video'\n};\n\n/**\n * @event ringing\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.membership:notified}\n */\n\n/**\n * @event connected\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.active}\n */\n\n/**\n * @event disconnected\n * @instance\n * @memberof Call\n * @deprecated with {@link config.phone.enableExperimentalGroupCallingSupport} enabled;\n * instead, listen for {@link Call.inactive}\n */\n\n/**\n * @event active\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event initializing\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event inactive\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event terminating\n * @instance\n * @memberof Call\n * only emitted if enableExperimentalGroupCallingSupport is enabled\n */\n\n/**\n * @event localMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event remoteMediaStream:change\n * @instance\n * @memberof Call\n */\n\n/**\n * @event error\n * @instance\n * @memberof Call\n */\n\n/**\n * @event membership:notified\n * @instance\n * @memberof Call\n * @type {CallMembership}\n * This replaces the {@link Call.ringing} event, but note that it's subtly\n * different. {@link Call.ringing} is emitted when the remote party calls\n * {@link Call#acknowledge()} whereas {@link Call.membership:notified} emits\n * shortly after (but as a direct result of) locally calling\n * {@link Phone#dial()}\n */\n\n/**\n * @event membership:connected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:declined\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:disconnected\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:waiting\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event membership:change\n * @instance\n * @memberof Call\n * @type {CallMembership}\n */\n\n/**\n * @event memberships:add\n * @instance\n * @memberof Call\n * Emitted when a new {@link CallMembership} is added to\n * {@link Call#memberships}. Note that {@link CallMembership#state} still needs\n * to be read to determine if the instance represents someone actively\n * participating the call.\n */\n\n/**\n * @event memberships:remove\n * @instance\n * @memberof Call\n * Emitted when a {@link CallMembership} is removed from {@link Call#memberships}.\n */\n\n/**\n * Payload for {@link Call#sendFeedback}\n * @typedef {Object} FeedbackObject\n * @property {number} userRating Number between 1 and 5 (5 being best) to let\n * the user score the call\n * @property {string} userComments Freeform feedback from the user about the\n * call\n * @property {Boolean} includeLogs set to true to submit client logs to the\n * Cisco Spark cloud. Note: at this time, all logs, not just call logs,\n * generated by the sdk will be uploaded to the Spark Cloud. Care has been taken\n * to avoid including PII in these logs, but if you've taken advantage of the\n * SDK's logger, you should make sure to avoid logging PII as well.\n */\n\n/**\n * @class\n */\nconst Call = SparkPlugin.extend({\n  namespace: 'Phone',\n\n  children: {\n    media: WebRTCMediaEngine\n  },\n\n  collections: {\n    /**\n     * @instance\n     * @memberof Call\n     * @type CallMemberships\n     */\n    memberships: CallMemberships\n  },\n\n  session: {\n    activeParticipantsCount: {\n      default: 0,\n      required: true,\n      type: 'number'\n    },\n    /**\n     * Indicates if the other party in the call has turned off their microphone.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteAudioMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    /**\n     * Indicates if the other party in the call has turned off their camera.\n     * `undefined` for multiparty calls\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {boolean}\n     */\n    remoteVideoMuted: {\n      default: false,\n      required: false,\n      type: 'boolean'\n    },\n\n    correlationId: 'string',\n    /**\n     * @instance\n     * @memberof Call\n     * @readonly\n     * @type {string}\n     */\n    facingMode: {\n      type: 'string',\n      values: ['user', 'environment']\n    },\n    /**\n     * Derived from locus.id and locus.fullState.lastActive. Not actually a\n     * \"derived\" property because it shouldn't be reset in event a locus\n     * replacement. Marked as private because this isn't necessarily the callId\n     * that we'll eventually expose as a first-class feature.\n     * @instance\n     * @memberof Call\n     * @private\n     * @readonly\n     * @type {string}\n     */\n    internalCallId: {\n      setOnce: true,\n      type: 'string'\n    },\n    locus: 'object',\n    /**\n     * Returns the local MediaStream for the call. May initially be `null`\n     * between the time @{Phone#dial is invoked and the  media stream is\n     * acquired if {@link Phone#dial} is invoked without a `localMediaStream`\n     * option.\n     *\n     * This property can also be set mid-call in which case the streams sent to\n     * the remote party are replaced by this stream. On success, the\n     * {@link Call}'s {@link localMediaStream:change} event fires, notifying any\n     * listeners that we are now sending media from a new source.\n     * @instance\n     * @memberof Call\n     * @type {MediaStream}\n     */\n    localMediaStream: 'object',\n\n    locusJoinInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    locusLeaveInFlight: {\n      default: false,\n      type: 'boolean'\n    },\n    /**\n     * Test helper. Shortcut to the current user's membership object. not\n     * official for now, but may get published at some point\n     * @instance\n     * @memberof Call\n     * @private\n     * @type {CallMembership}\n     */\n    me: {\n      type: 'object'\n    }\n  },\n\n  // Note, in its current form, any derived property that is an object will emit\n  // a change event everytime a locus gets replaced, even if no values change.\n  // For the moment, this is probably ok; once we have multi-party, regular\n  // change events on activeParticipants may be a problem.\n  derived: {\n    id: {\n      deps: ['locus'],\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    isActive: {\n      deps: ['locus'],\n      fn() {\n        return !!(this.locus && isActive(this.locus));\n      }\n    },\n    joinedOnThisDevice: {\n      deps: ['locus'],\n      default: false,\n      fn() {\n        return !!(this.locus && joinedOnThisDevice(this.spark, this.locus));\n      }\n    },\n    locusUrl: {\n      deps: ['locus'],\n      fn() {\n        return get(this, 'locus.url');\n      }\n    },\n    device: {\n      deps: ['locus'],\n      fn() {\n        return this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n      }\n    },\n    mediaConnection: {\n      deps: ['locus'],\n      fn() {\n        const device = this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n        return get(device, 'mediaConnections[0]');\n      }\n    },\n    mediaId: {\n      deps: ['locus'],\n      fn() {\n        const device = this.locus.self && this.locus.self.devices.find((item) => item.url === this.spark.internal.device.url);\n        return get(device, 'mediaConnections[0].mediaId');\n      }\n    },\n    /**\n     * The other participant in a two-party call. `undefined` for multiparty\n     * calls\n     * @instance\n     * @memberof Call\n     * @readyonly\n     * @type {CallMembership}\n     */\n    remoteMember: {\n      deps: [\n        'memberships',\n        'locus'\n      ],\n      fn() {\n        if (isCall(this.locus)) {\n          return this.memberships.find((m) => !m._self);\n        }\n\n        return undefined;\n      }\n    },\n    direction: {\n      deps: ['locus'],\n      fn() {\n        // This seems brittle, but I can't come up with a better way. The only\n        // way we should have a Call without a locus is if we just initiated a\n        // call but haven't got the response from locus yet.\n        if (!this.locus) {\n          return 'out';\n        }\n        return direction(this.locus);\n      }\n    },\n    from: {\n      deps: [\n        'memberships'\n      ],\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    to: {\n      deps: [\n        'memberships'\n      ],\n      fn() {\n        if (this.isCall) {\n          return this.memberships.find((m) => !m.isInitiator);\n        }\n        return undefined;\n      }\n    },\n    /**\n     * <b>active</b> - At least one person (not necessarily this user) is\n     * participating in the call<br/>\n     * <b>inactive</b> - No one is participating in the call<br/>\n     * <b>initializing</b> - reserved for future use<br/>\n     * <b>terminating</b> - reserved for future use<br/>\n     * Only defined if\n     * {@link config.phone.enableExperimentalGroupCallingSupport} has been\n     * enabled\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    state: {\n      deps: [\n        'locus'\n      ],\n      fn() {\n        if (this.config.enableExperimentalGroupCallingSupport) {\n          return getState(this.locus);\n        }\n\n        return undefined;\n      }\n    },\n    /**\n     * <b>initiated</b> - Offer was sent to remote party but they have not yet\n     * accepted <br>\n     * <b>ringing</b> - Remote party has acknowledged the call <br>\n     * <b>connected</b> - At least one party is still on the call <br>\n     * <b>disconnected</b> - All parties have dropped <br>\n     * <b>replaced</b> - In (hopefully) rare cases, the underlying data backing\n     * a Call instance may change in such a way that further interaction with\n     * that Call is handled by a different instance. In such cases, the first\n     * Call's status, will transition to `replaced`, which is almost the same\n     * state as `disconnected`. Generally speaking, such a transition should not\n     * happen for a Call instance that is actively sending/receiving media.\n     * @deprecated The {@link Call#status} attribute will likely be replaced by\n     * the {@link Call#state}.\n     * @instance\n     * @memberof Call\n     * @member {string}\n     * @readonly\n     */\n    status: {\n      deps: [\n        'locus'\n      ],\n      fn() {\n        return getStatus(this.spark, this.locus, this.previousAttributes().locus);\n      }\n    },\n    /**\n     * Access to the remote party’s `MediaStream`.\n     * @instance\n     * @memberof Call\n     * @member {MediaStream}\n     * @readonly\n     */\n    remoteMediaStream: {\n      deps: ['media.remoteMediaStream'],\n      fn() {\n        return this.media.remoteMediaStream;\n      }\n    },\n    receivingAudio: {\n      deps: ['media.receivingAudio'],\n      fn() {\n        return this.media.receivingAudio;\n      }\n    },\n    receivingVideo: {\n      deps: ['media.receivingVideo'],\n      fn() {\n        return this.media.receivingVideo;\n      }\n    },\n    sendingAudio: {\n      deps: ['media.sendingAudio'],\n      fn() {\n        return this.media.sendingAudio;\n      }\n    },\n    sendingVideo: {\n      deps: ['media.sendingVideo'],\n      fn() {\n        return this.media.sendingVideo;\n      }\n    },\n    isCall: {\n      deps: ['locus'],\n      fn() {\n        return isCall(this.locus);\n      }\n    },\n    supportsDtmf: {\n      deps: ['locus'],\n      fn() {\n        return get(this, 'locus.self.enableDTMF');\n      }\n    }\n  },\n\n  @oneFlight\n  /**\n   * Use to acknowledge (without answering) an incoming call. Will cause the\n   * initiator's Call instance to emit the ringing event.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  acknowledge() {\n    this.logger.info('call: acknowledging');\n    return this.spark.internal.locus.alert(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.logger.info('call: acknowledged')));\n  },\n\n  @oneFlight\n  @whileInFlight('locusJoinInFlight')\n  // Note: the `whileInFlight` decorator screws up name inferrence, so we need\n  // to include @name below.\n  /**\n   * Answers an incoming call.\n   * @instance\n   * @name answer\n   * @memberof Call\n   * @param {Object} options\n   * @param {MediaStreamConstraints} options.constraints\n   * @returns {Promise}\n   */\n  answer(options) {\n    this.logger.info('call: answering');\n    if (!this.locus) {\n      this.logger.info('call: no locus provided, answer() is a noop');\n      return Promise.resolve();\n    }\n    // Locus may think we're joined on this device if we e.g. reload the page,\n    // so, we need to check if we also have a working peer connection\n    // this.media.pc.remoteDescription.sdp is a temporary proxy for\n    // pc.connectionState until chrome catches up to the spec\n    if (this.joinedOnThisDevice && this.media.pc.remoteDescription && this.media.pc.remoteDescription.sdp) {\n      this.logger.info('call: already joined on this device');\n      return Promise.resolve();\n    }\n    return this._join('join', this.locus, options)\n      .then(tap(() => this.logger.info('call: answered')));\n  },\n\n  /**\n   * Alias of {@link Call#reject}\n   * @see {@link Call#reject}\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  decline() {\n    return this.reject();\n  },\n\n  @oneFlight\n  /**\n   * Used by {@link Phone#dial} to initiate an outbound call\n   * @instance\n   * @memberof Call\n   * @param {[type]} invitee\n   * @param {[type]} options\n   * @private\n   * @returns {[type]}\n   */\n  dial(invitee, options) {\n    this.locusJoinInFlight = true;\n    this.logger.info('call: dialing');\n\n    let locusMethodName = 'create';\n\n    if (base64.validate(invitee)) {\n      // eslint-disable-next-line no-unused-vars\n      const parsed = base64.decode(invitee).split('/');\n      const resourceType = parsed[3];\n      const id = parsed[4];\n      if (resourceType === 'PEOPLE') {\n        invitee = id;\n      }\n\n      if (resourceType === 'ROOM') {\n        if (!get(this, 'config.enableExperimentalGroupCallingSupport')) {\n          throw new Error('Group calling is not enabled. Please enable config.phone.enableExperimentalGroupCallingSupport');\n        }\n\n        locusMethodName = 'join';\n        invitee = {\n          url: `${this.spark.internal.device.services.conversationServiceUrl}/conversations/${id}/locus`\n        };\n      }\n    }\n\n    // Note: mercury.connect() will call device.register() if needed. We're not\n    // using phone.register() here because it guarantees a device refresh, which\n    // is probably unnecessary.\n    this.spark.internal.mercury.connect()\n      .then(() => this._join(locusMethodName, invitee, options))\n      .then(tap(() => this.logger.info('call: dialed')))\n      .catch((reason) => {\n        this.trigger('error', reason);\n      })\n      .then(() => {\n        this.locusJoinInFlight = false;\n      });\n\n    return this;\n  },\n\n  /**\n   * Disconnects the active call. Applies to both incoming and outgoing calls.\n   * This method may be invoked in any call state and the SDK should take care\n   * to tear down the call and free up all resources regardless of the state.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  hangup() {\n    // Note: not a @oneFlight because this function must call itself\n    if (this.direction === 'in' && !this.joinedOnThisDevice) {\n      return this.reject();\n    }\n\n    this.logger.info('call: hanging up');\n\n    this.media.stop();\n\n    if (this.locusJoinInFlight) {\n      this.logger.info('call: locus join in flight, waiting for rest call to complete before hanging up');\n      return this.when('change:locusJoinInFlight')\n        .then(() => this.hangup());\n    }\n\n    if (!this.locus) {\n      return this._finish()\n        .then(() => this.logger.info('call: hang up complete, call never created'));\n    }\n\n    return this._hangup();\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Call\n   * @private\n   * @param {Object} attrs\n   * @param {Object} options\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    this.listenTo(this.memberships, 'change:audioMuted', () => {\n      if (this.remoteMember) {\n        this.remoteAudioMuted = this.remoteMember.audioMuted;\n      }\n    });\n\n    this.listenTo(this.memberships, 'change:videoMuted', () => {\n      if (this.remoteMember) {\n        this.remoteVideoMuted = this.remoteMember.videoMuted;\n      }\n    });\n\n    this.on('change:remoteMember', () => {\n      if (this.remoteMember) {\n        this.remoteAudioMuted = this.remoteMember.audioMuted;\n        this.remoteVideoMuted = this.remoteMember.videoMuted;\n      }\n      else {\n        this.remoteAudioMuted = undefined;\n        this.remoteVideoMuted = undefined;\n      }\n    });\n\n    this.listenTo(this.memberships, 'add', (model) => this.trigger('memberships:add', model));\n    this.listenTo(this.memberships, 'remove', (model) => this.trigger('memberships:remove', model));\n    this.listenTo(this.memberships, 'change', (model) => this.trigger('membership:change', model));\n    this.listenTo(this.memberships, 'change:state', (model) => {\n      this.activeParticipantsCount = this\n        .memberships\n        .filter((m) => m.state === 'connected')\n        .length;\n\n      this.trigger(`membership:${model.state}`, model);\n    });\n\n    if (this.locus) {\n      this.internalCallId = makeInternalCallId(this.locus);\n    }\n    else {\n      this.once('change:locus', () => {\n        this.internalCallId = makeInternalCallId(this.locus);\n      });\n    }\n\n    this.memberships.listenToAndRun(this, 'change:locus', () => {\n      if (this.locus && this.locus.participants) {\n        // Reminder: we're parsing here instead of CallMembership(s) so that we\n        // can avoid making those classes spark aware and therefore keep them a\n        // lot simpler\n        this.memberships.set(participantsToCallMemberships(this.spark, this.locus));\n        this.me = this.memberships.find((m) => m._self);\n      }\n    });\n\n    this.listenTo(this.spark.internal.mercury, 'event:locus', (event) => this._onLocusEvent(event));\n    this.listenTo(this.spark.internal.mercury, 'event:locus.difference', (event) => this._onLocusEvent(event));\n\n    this.listenTo(this.media, 'error', (error) => this.trigger('error', error));\n    this.on('replaced', () => this._finish());\n\n    this.listenTo(this.media, 'negotiationneeded', debounce(() => {\n      this.media.createOffer()\n        .then(() => this._updateMedia({\n          sdp: this.media.offerSdp,\n          mediaId: this.mediaId\n        }))\n        .then(() => this._pollForExpectedLocusAndSdp())\n        .then(() => {\n          const sdp = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n          return this.media.acceptAnswer(sdp);\n        })\n        .catch((reason) => this.emit('error', reason));\n    }));\n\n    // Reminder: this is not a derived property so that we can reassign the\n    // stream midcall\n    this.on('change:media.localMediaStream', () => {\n      this.localMediaStream = this.media.localMediaStream;\n    });\n\n    this.on('change:localMediaStream', () => {\n      if (this.localMediaStream && this.localMediaStream !== this.media.localMediaStream) {\n        [\n          'audio',\n          'video'\n        ]\n          .forEach((kind) => {\n            // eslint-disable-next-line max-nested-callbacks\n            const track = this.localMediaStream.getTracks().find((t) => t.kind === kind);\n            if (track) {\n              this.media.setMedia(kind, boolToStatus(track.enabled, this[`receiving${capitalize[kind]}`]), track);\n            }\n            else {\n              this.media.setMedia(kind, boolToStatus(false, this[`receiving${capitalize[kind]}`]));\n            }\n          });\n        this.localMediaStream = this.media.localMediaStream;\n      }\n    });\n\n    [\n      'remoteMediaStream',\n      'localMediaStream',\n      'remoteAudioMuted',\n      'remoteVideoMuted'\n    ].forEach((key) => {\n      this.on(`change:${key}`, () => this.trigger(`${key}:change`));\n    });\n\n    this.listenTo(this.media, 'internalTrackUpdate', () => {\n      this.trigger('remoteMediaStream:change');\n    });\n\n    // This handler is untested because there's no way to provoke it. It's\n    // probably actually only relevant for group calls.\n    this.on('change:isActive', () => {\n      if (!this.isActive) {\n        if (this.joinedOnThisDevice) {\n          this.logger.info('call: hanging up due to locus going inactive');\n          this.hangup();\n        }\n      }\n    });\n\n    this.on('change:activeParticipantsCount', () => {\n      if (!this.joinedOnThisDevice) {\n        return;\n      }\n\n      if (this.activeParticipantsCount !== 1) {\n        return;\n      }\n\n      if (this.isCall && !this.config.hangupIfLastActive.call) {\n        return;\n      }\n\n      if (!this.isCall && !this.config.hangupIfLastActive.meeting) {\n        return;\n      }\n\n      const previousLocus = this.previousAttributes().locus;\n      if (!previousLocus) {\n        return;\n      }\n\n      if (activeParticipants(previousLocus).length > 1) {\n        this.logger.info('call: hanging up due to last participant in call');\n        this.hangup();\n      }\n    });\n\n    if (this.config.enableExperimentalGroupCallingSupport) {\n      this.on('inactive', () => this.hangup());\n      this.on('inactive', () => this._finish());\n\n      this.on('change:state', () => {\n        process.nextTick(() => this.trigger(this.state));\n      });\n      this.on = wrap(this.on, (fn, eventName, ...rest) => {\n        if (deprecatedCallEventNames.includes(eventName)) {\n          throw new Error(`The \"${eventName}\" event is no longer valid with \"enableExperimentalGroupCallingSupport===true\"`);\n        }\n\n        return Reflect.apply(fn, this, [eventName, ...rest]);\n      });\n    }\n    else {\n      this.on('disconnected', () => this.hangup());\n      this.on('disconnected', () => this._finish());\n\n      this.on('change:status', () => {\n        process.nextTick(() => this.trigger(this.status));\n      });\n    }\n  },\n\n  @oneFlight\n  /**\n   * Rejects an incoming call. Only applies to incoming calls. Invoking this\n   * method on an outgoing call is a no-op.\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  reject() {\n    if (this.direction === 'out') {\n      return Promise.resolve();\n    }\n\n    this.logger.info('call: rejecting');\n    /* eslint no-invalid-this: [0] */\n    return this.spark.internal.locus.decline(this.locus)\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this._finish()))\n      .then(tap(() => this.logger.info('call: rejected')));\n  },\n\n  /**\n   * Send DTMF tones to the current call\n   * @param {string} tones\n   * @returns {Promise}\n   */\n  sendDtmf(tones) {\n    if (!this.supportsDtmf) {\n      return Promise.reject(new Error('this call does not support dtmf'));\n    }\n\n    return this.spark.internal.locus.sendDtmf(this.locus, tones);\n  },\n\n  /**\n   * Sends feedback about the call to the Cisco Spark cloud\n   * @instance\n   * @memberof Call\n   * @param {FeedbackObject} feedback\n   * @returns {Promise}\n   */\n  sendFeedback(feedback) {\n    return this.spark.internal.metrics.submit('meetup_call_user_rating', feedback);\n  },\n\n  startReceivingAudio() {\n    return this._changeReceivingMedia('audio', true);\n  },\n\n  startReceivingVideo() {\n    return this._changeReceivingMedia('video', true);\n  },\n\n  /**\n   * Starts sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingAudio() {\n    return this._changeSendingMedia('audio', true);\n  },\n\n  /**\n   * Starts sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  startSendingVideo() {\n    return this._changeSendingMedia('video', true);\n  },\n\n  stopReceivingAudio() {\n    return this._changeReceivingMedia('audio', false);\n  },\n\n  stopReceivingVideo() {\n    return this._changeReceivingMedia('video', false);\n  },\n\n  /**\n   * Stops sending audio to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingAudio() {\n    return this._changeSendingMedia('audio', false);\n  },\n\n  /**\n   * Stops sending video to the Cisco Spark Cloud. (stops broadcast immediately,\n   * even if renegotiation has not completed)\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  stopSendingVideo() {\n    return this._changeSendingMedia('video', false);\n  },\n\n  /**\n   * Replaces the current mediaStrem with one with identical constraints, except\n   * for an opposite facing mode. If the current facing mode cannot be\n   * determined, the facing mode will be set to `user`. If the call is audio\n   * only, this function will throw.\n   * @instance\n   * @memberof Call\n   * @returns {undefined}\n   */\n  toggleFacingMode() {\n    if (!this.sendingVideo) {\n      throw new Error('Cannot toggle facingMode if we\\'re not sending video');\n    }\n\n    if (this.facingMode !== 'user' && this.facingMode !== 'environment') {\n      throw new Error('Cannot determine current facing mode; specify a new localMediaStream to change cameras');\n    }\n\n    const constraint = {\n      facingMode: {\n        ideal: this.facingMode === 'user' ? 'environment' : 'user'\n      }\n    };\n\n    this.media.setMedia('video', boolToStatus(true, this.sendingVideo), constraint);\n    return new Promise((resolve) => {\n      this.media.once('change:answerSdp', () => {\n        this.facingMode = constraint.facingMode.ideal;\n        resolve();\n      });\n    });\n  },\n\n  /**\n   * Toggles receiving audio from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingAudio() {\n    return this.receivingAudio ? this.stopReceivingAudio() : this.startReceivingAudio();\n  },\n\n  /**\n   * Toggles receiving video from the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleReceivingVideo() {\n    return this.receivingVideo ? this.stopReceivingVideo() : this.startReceivingVideo();\n  },\n\n  /**\n   * Toggles sending audio to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingAudio() {\n    return this.sendingAudio ? this.stopSendingAudio() : this.startSendingAudio();\n  },\n\n  /**\n   * Toggles sending video to the Cisco Spark Cloud\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  toggleSendingVideo() {\n    return this.sendingVideo ? this.stopSendingVideo() : this.startSendingVideo();\n  },\n\n  _changeReceivingMedia(kind, value) {\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: kind});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes('recv')) {\n        this.logger.info('_changeReceivingMedia: expecting to renegotiate, waiting for media to emit \"answeraccepted\"');\n        this.media.once('answeraccepted', () => resolve(this._updateMuteToggles()));\n      }\n      else {\n        this.logger.info(`_changeReceivingMedia: expecting to renegotiate, waiting for call to emit \"change:receiving${capitalize[kind]}\"`);\n        this.once(`change:receiving${capitalize[kind]}`, () => resolve());\n      }\n\n      const newDirection = boolToStatus(this.media[`sending${capitalize[kind]}`], value);\n      this.media.setMedia(kind, newDirection);\n    });\n  },\n\n  _changeSendingMedia(kind, value) {\n    this.logger.info(`_changeSendingMedia: changing sending \"${kind}\" to \"${value}\"`);\n    return new Promise((resolve) => {\n      const sdp = parse(this.media.offerSdp);\n      const section = find(sdp.media, {type: kind});\n      // If the current offer is going to trigger a renegotiation, then we don't\n      // need to renegotiate here.\n      if (!section || !section.direction.includes('send')) {\n        this.logger.info('_changeSendingMedia: expecting to renegotiate, waiting for media to emit \"answeraccepted\"');\n        this.media.once('answeraccepted', () => resolve());\n      }\n      else {\n        this.logger.info(`_changeSendingMedia: expecting to renegotiate, waiting for call to emit \"change:sending${capitalize[kind]}\"`);\n        this.once(`change:sending${capitalize[kind]}`, () => resolve(this._updateMuteToggles()));\n      }\n\n      const newDirection = boolToStatus(value, this.media[`receiving${capitalize[kind]}`]);\n      this.media.setMedia(kind, newDirection);\n    });\n  },\n\n  @oneFlight\n  @whileInFlight('locusLeaveInFlight')\n  /**\n   * Does the internal work necessary to end a call while allowing hangup() to\n   * call itself without getting stuck in promise change because of oneFlight\n   * @private\n   * @instance\n   * @memberof Call\n   * @returns {Promise}\n   */\n  _hangup() {\n    this.logger.info('_hangup: attempting to leave locus');\n    const status = get(this, this.config.enableExperimentalGroupCallingSupport ? 'me.state' : 'status');\n    if (status === 'disconnected') {\n      this.logger.info('already hung up, not calling locus again');\n      return Promise.resolve();\n    }\n\n    if (status === 'declined') {\n      this.logger.info('call was declined, not leaving again');\n      return Promise.resolve();\n    }\n\n    if (status !== 'connected') {\n      this.logger.info('call is neither connected, disconnected, or declined, declining instead of leaving');\n      return this.decline();\n    }\n\n    this.logger.info('_hangup: leaving locus');\n    return this.spark.internal.locus.leave(this.locus)\n      .catch((err) => {\n        this.logger.error('_hangup: locus leave error: ', err.stack || err.toString());\n        return Promise.reject(err);\n      })\n      .then(tap(() => this.logger.info(`_hangup ${this.locus.id}: finished leaving via locus`)))\n      .then(tap(() => this.logger.info(`_hangup ${this.locus.id}: setting locus`)))\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.logger.info(`_hangup ${this.locus.id}: finished setting locus`)))\n      // Note: not stopping event-listening here; that'll happening\n      // automatically when `disconnected` fires.\n      .then(tap(() => this.logger.info('call: hung up')));\n  },\n\n  _finish() {\n    return new Promise((resolve) => {\n      // need to do this on next tick otherwise this.off() prevents remaining\n      // events from being received (e.g. other listeners for `disconnected`\n      // won't execute)\n      process.nextTick(() => {\n        this.media.stop();\n        this.stopListening(this.spark.internal.mercury);\n        this.off();\n        resolve();\n      });\n    });\n  },\n\n  @oneFlight\n  // The complexity in _join is largely driven up by fairly readable `||`s\n  // eslint-disable-next-line complexity\n  _join(locusMethodName, target, options = {}) {\n    if (options.localMediaStream) {\n      this.localMediaStream = options.localMediaStream;\n    }\n    else {\n      if (!options.constraints) {\n        options.constraints = {\n          audio: true,\n          video: {\n            facingMode: {\n              ideal: this.spark.phone.defaultFacingMode\n            }\n          }\n        };\n      }\n\n      const mode = get(options, 'constraints.video.facingMode.ideal', get(options, 'constraints.video.facingMode.exact'));\n      if (mode === 'user' || mode === 'environment') {\n        this.facingMode = mode;\n      }\n\n      const recvOnly = !options.constraints.audio && !options.constraints.video;\n      options.offerOptions = defaults(options.offerOptions, {\n        offerToReceiveAudio: recvOnly || !!options.constraints.audio,\n        offerToReceiveVideo: recvOnly || !!options.constraints.video\n      });\n\n      if (options.constraints.fake) {\n        this.media.constraints.fake = true;\n      }\n\n      this.media.setMedia('audio', boolToStatus(options.constraints.audio, options.offerOptions.offerToReceiveAudio), options.constraints.audio);\n      this.media.setMedia('video', boolToStatus(options.constraints.video, options.offerOptions.offerToReceiveVideo), options.constraints.video);\n    }\n\n    if (!target.correlationId) {\n      this.correlationId = options.correlationId = uuid.v4();\n    }\n\n    if (!this.correlationId) {\n      this.correlationId = target.correlationId;\n    }\n\n    // reminder: not doing this copy in initialize() because config may not yet\n    // be available\n    this.media.bandwidthLimit = {\n      audioBandwidthLimit: this.config.audioBandwidthLimit,\n      videoBandwidthLimit: this.config.videoBandwidthLimit\n    };\n\n    return this.media.createOffer()\n      .then(tap(() => this.logger.info('created offer')))\n      .then(() => this.spark.internal.locus[locusMethodName](target, {\n        localSdp: this.media.offerSdp,\n        correlationId: this.correlationId\n      }))\n      .then(tap(() => this.logger.info('sent offer to locus')))\n      .then(tap(() => this.logger.info('setting locus')))\n      .then((locus) => this._setLocus(locus))\n      .then(tap(() => this.logger.info('successfully set locus')))\n      .then(() => {\n        const answer = JSON.parse(this.mediaConnection.remoteSdp).sdp;\n        this.logger.info('accepting answer');\n        this.logger.info('peer state', this.media.pc && this.media.pc.signalingState);\n        if (!this.media.ended) {\n          return this.media.acceptAnswer(answer)\n            .then(() => this.logger.info('answer accepted'))\n            .catch((err) => {\n              this.logger.error('failed to accept answer', err);\n              return Promise.reject(err);\n            });\n        }\n        this.logger.info('call: already ended, not accepting answer');\n        return Promise.resolve();\n      });\n  },\n\n  /**\n   * Handles an incoming mercury event if relevant to this call.\n   * @instance\n   * @memberof Call\n   * @param {Types~MercuryEvent} event\n   * @private\n   * @returns {undefined}\n   */\n  _onLocusEvent(event) {\n    const devices = get(event, 'data.locus.self.devices');\n    const device = devices && find(devices, (item) => item.url === this.spark.internal.device.url);\n    if (this.locus && makeInternalCallId(event.data.locus) === this.internalCallId || device && this.correlationId && this.correlationId === device.correlationId) {\n      this.logger.info(`locus event: ${event.data.eventType}`);\n      this._setLocus(event.data.locus);\n    }\n\n    if (event.data.locus.replaces) {\n      for (const replaced of event.data.locus.replaces) {\n        if (`${replaced.locusUrl}_${replaced.lastActive}` === this.internalCallId) {\n          this._setLocus(event.data.locus);\n          this.logger.info(`locus replacement event: ${event.data.eventType}`, this.locusUrl, '->', event.data.locus.url);\n          return;\n        }\n      }\n    }\n  },\n\n  @retry\n  /**\n   * The response to a PUT to LOCUS/media may not be fully up-to-date when we\n   * receive it. This method polls locus until we get a locus with the status\n   * properties we expect (or three errors occur)\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise<Types~Locus>}\n   */\n  _pollForExpectedLocusAndSdp() {\n    return new Promise((resolve, reject) => {\n      const offer = parse(this.media.offerSdp);\n\n      const audioOfferDirection = getMediaDirectionFromSDP('audio', offer);\n      const videoOfferDirection = getMediaDirectionFromSDP('video', offer);\n\n      const self = this;\n      let count = 0;\n      const validate = () => {\n        count += 1;\n        try {\n          this.logger.info(`iteration ${count}: checking if current locus has the expected audio and video directions`);\n          if (isExpectedDirection(JSON.parse(this.mediaConnection.remoteSdp).sdp)) {\n            this.logger.info(`iteration ${count}: the current locus sdp has the expected audio and video directions`);\n            try {\n              this._validateLocusMediaState(this.locus);\n              this.logger.info(`iteration ${count}: the current locus has the expected audio and video directions; syncing`);\n              resolve();\n            }\n            catch (err) {\n              this.logger.info(`iteration ${count}: the current locus does not have the expected audio and video directions; syncing`);\n            }\n          }\n          else {\n            this.logger.info(`iteration ${count}: the current locus sdp does not have the expected audio and video directions; syncing`);\n          }\n\n          if (count > 4) {\n            reject(new Error(`After ${count} attempts polling locus`));\n          }\n\n          setTimeout(() => this.spark.internal.locus.sync(this.locus)\n            .then((locus) => this._setLocus(locus))\n            .then(validate)\n            .catch(reject), 1000 * (2 ** count));\n        }\n        catch (err) {\n          reject(err);\n        }\n      };\n\n      validate();\n      /**\n       * Determine if the incoming sdp has the expected media directions\n       * @private\n       * @param {string} sdp\n       * @returns {boolean}\n       */\n      function isExpectedDirection(sdp) {\n        const answer = parse(sdp);\n\n        const audioAnswerDirection = getMediaDirectionFromSDP('audio', answer);\n        const videoAnswerDirection = getMediaDirectionFromSDP('video', answer);\n\n        const expectedAudioAnswerDirection = reverseMediaDirection(audioOfferDirection);\n        const expectedVideoAnswerDirection = reverseMediaDirection(videoOfferDirection);\n\n        self.logger.info(`audio: ${audioOfferDirection}, ${audioAnswerDirection}, ${expectedAudioAnswerDirection}`);\n        self.logger.info(`video: ${videoOfferDirection}, ${videoAnswerDirection}, ${expectedVideoAnswerDirection}`);\n\n        return audioAnswerDirection === expectedAudioAnswerDirection && videoAnswerDirection === expectedVideoAnswerDirection;\n      }\n    });\n  },\n\n  /**\n   * Assigns a new locus to this.locus according to locus sequencing rules\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} incoming\n   * @param {boolean} recursing - when true, indicates that this method has\n   * called itself and we should fall back to {@link locus.get()} instead of\n   * calling {@link locus.sync()}\n   * @private\n   * @returns {Promise}\n   */\n  _setLocus(incoming, recursing = false) {\n    const current = this.locus;\n    if (!current) {\n      this.locus = incoming;\n      return Promise.resolve();\n    }\n    const action = this.spark.internal.locus.compare(current, incoming);\n\n    switch (action) {\n      case USE_INCOMING:\n        this.locus = this.spark.internal.locus.merge(this.locus, incoming);\n        if (this.device) {\n          this.correlationId = this.device.correlationId;\n        }\n        break;\n      case FETCH:\n        if (recursing) {\n          this.logger.info('call: fetching locus according to sequencing algorithm');\n          return this.spark.internal.locus.get(current)\n            .then((locus) => this._setLocus(locus, true));\n        }\n\n        this.logger.info('call: syncing locus according to sequencing algorithm');\n\n        return this.spark.internal.locus.sync(current)\n          .then((locus) => this._setLocus(locus, true));\n\n      default:\n      // do nothing\n    }\n\n    return Promise.resolve();\n  },\n\n  /**\n   * Changes the status of media\n   * @instance\n   * @memberof Call\n   * @param {Object} payload\n   * @private\n   * @returns {Promise}\n   */\n  _updateMedia(payload) {\n    if (payload.sdp && !payload.sdp.includes('b=')) {\n      throw new Error('outbound sdp should always have a \\'b=\\' line');\n    }\n    return this.spark.internal.locus.updateMedia(this.locus, payload)\n      .then((locus) => this._setLocus(locus));\n  },\n\n  @oneFlight\n  /**\n   * Tells locus we've got a new media direction\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  _updateMuteToggles() {\n    return this._updateMedia({\n      sdp: this.media.offerSdp,\n      mediaId: this.mediaId,\n      audioMuted: didChange('audio', this.media.offerSdp, this.media.answerSdp) ? this.sendingAudio : !this.sendingAudio,\n      videoMuted: didChange('video', this.media.offerSdp, this.media.answerSdp) ? this.sendingVideo : !this.sendingVideo\n    })\n      .then(() => this._waitForExpectedLocus());\n  },\n\n  /**\n   * Checks that this.locus has the expected state\n   * @instance\n   * @memberof Call\n   * @param {Types~Locus} locus\n   * @private\n   * @returns {Promise}\n   */\n  _validateLocusMediaState(locus) {\n    const locusAudio = locus.self.status.audioStatus.toLowerCase();\n    const mediaAudio = this.media.audioDirection;\n\n    if (locusAudio !== mediaAudio) {\n      this.logger.warn(`locus: expected audio ${locusAudio} (locus) to equal ${mediaAudio} (local media)`);\n      throw new Error('locus.self.status.audioStatus indicates the received DTO is out of date');\n    }\n\n    const locusVideo = locus.self.status.videoStatus.toLowerCase();\n    const mediaVideo = this.media.videoDirection;\n    if (locusVideo !== mediaVideo) {\n      this.logger.warn(`locus: expected video ${locusVideo} (locus) to equal ${mediaVideo} (local media)`);\n      throw new Error('locus.self.status.videoStatus indicates the received DTO is out of date');\n    }\n\n    return locus;\n  },\n\n  /**\n   * Waits until this.locus describes the expected state\n   * @instance\n   * @memberof Call\n   * @private\n   * @returns {Promise}\n   */\n  _waitForExpectedLocus() {\n    return new Promise((resolve) => {\n      const listener = () => {\n        try {\n          this._validateLocusMediaState(this.locus);\n          this.off('change:locus', listener);\n          resolve();\n        }\n        catch (err) {\n          this.logger.warn('locus: current locus not in expected state; waiting for next locus');\n        }\n      };\n      this.on('change:locus', listener);\n      listener();\n    });\n  }\n});\n\nCall.make = function make(attrs, options) {\n  return new Call(attrs, options);\n};\n\nexport default Call;\n"]}